# vim:set foldmethod=marker foldlevel=0:
# bashrc, zshrc共通の設定。source このファイルのパスを実行して読み込む
# 注意: fasdの設定を行ったあとにz関数定義をしなければ上書きされてしまう

# 外部コマンド設定{{{
# PATHに$HOME/binを追加

if [ -d "$HOME/bin" ];
then
    export PATH=$PATH:~/bin
fi

if [ -d /home/linuxbrew/.linuxbrew/bin ]; then
    export PATH=$PATH:/home/linuxbrew/.linuxbrew/bin
fi

# nvimが存在すればそれをvimとして使用
if type "nvim" > /dev/null 2>&1; then
    export EDITOR=nvim
    export VISUAL=nvim
    alias vim=nvim
    alias vi=nvim
fi

# fasdが存在すれば初期化
if type "fasd" > /dev/null 2>&1; then
    eval "$(fasd --init auto)"
fi

# trash-cli(npmパッケージ)が存在すればrmを上書き
if type trash > /dev/null 2>&1; then
    alias rm=trash
fi

# if [ -d "/home/linuxbrew/.linuxbrew/opt/python@3/libexec/bin" ] ; then
#   export PATH="/home/linuxbrew/.linuxbrew/opt/python@3/libexec/bin:$PATH"
# fi

# xselを使ってbpcopyにエイリアス
if type "xsel" > /dev/null 2>&1; then
# 参考: https://qiita.com/Kzno/items/6f2fa98256bdffb0fd43
    alias pbcopy='xsel --clipboard --input'
fi

if type "go" > /dev/null 2>&1; then
    export GOPATH=$HOME/go
    export PATH=$PATH:$GOPATH/bin
fi

if [ -e ${HOME}/anaconda3/etc/profile.d/conda.sh ]; then
    source ~/anaconda3/etc/profile.d/conda.sh
fi

if [ -d ${HOME}/anaconda3/bin ]; then
    export PATH=~/anaconda3/bin:$PATH
fi

python37_site_packages=${HOME}/anaconda3/lib/python3.7/site-packages
python38_site_packages=${HOME}/anaconda3/lib/python3.8/site-packages
if [ -d ${python37_site_packages} ]; then
    export PYTHONPATH=$PYTHONPATH:${python37_site_packages}
fi
if [ -d ${python38_site_packages} ]; then
    export PYTHONPATH=$PYTHONPATH:${python38_site_packages}
fi

if [ -d /usr/lib/go/bin ]; then
    export PATH=/usr/lib/go/bin:$PATH
fi

# }}}
# シェル関数{{{

# zコマンドでMRUファイルをfzfできる(fasdが必要)
# 参考: [bashでもfzf+fasdで簡単ディレクトリ移動](https://qiita.com/thesaitama/items/e139646ed6bc9c5dbf83)
unalias z
z() {
  if [[ -z "$*" ]]; then
    cd "$(fasd_cd -d | fzf -1 -0 --no-sort --tac +m | sed 's/^[0-9,.]* *//')"
  else
    cd "$(fasd_cd -d | fzf --query="$*" -1 -0 --no-sort --tac +m | sed 's/^[0-9,.]* *//')"
  fi
}

# rangerの多重起動を回避
# 参考: https://wiki.archlinux.org/index.php/Ranger#Preventing_nested_ranger_instances
# ranger() {
#     if [ -z "$RANGER_LEVEL" ]; then
#         /usr/bin/ranger "$@"
#     else
#         exit
#     fi
# }

# manコマンドでカラー表示
# http://momota.github.io/blog/2013/08/31/shell-man-color/
man() {
env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
        man "$@"
}

# gitリポジトリのルートからの相対パスで移動
gcd () {
[[ ! -z $(which git 2> /dev/null) ]] && [[ $(git status 2> /dev/null) ]] && cd "./$(git rev-parse --show-cdup)/$1"
}

# cdnのURI取得
cdn () {
  if [ $# -eq 1 ]; then
    curl -s "https://api.cdnjs.com/libraries/$1"|jq '.assets[0].files[]' |fzf
  else
    echo 'cdn {library-name}'
  fi
}

# zathuraをtabbedで管理
# https://github.com/mtikekar/zathura-tabbed/blob/master/zathura-tabbed

zathura-tabbed ()  {
  xidfile="/run/user/"$(id -u)"/zathura-tabbed.xid"
  wmclass="zathura-tabbed"
  
  # check if a tabbed window is open
  set -o pipefail
  if [ -r "$xidfile" ] && xid=$(cat "$xidfile") && xprop -id "$xid" WM_CLASS 2> /dev/null | grep -q "$wmclass";
  then
    wmctrl -i -R "$xid"
  else
    read xid < <(tabbed -cdn "$wmclass" -p -1 2> /dev/null)
    wmctrl -i -r "$xid" -b add,maximized_vert,maximized_horz
    echo "$xid" > "$xidfile"
  fi
  zathura -e "$xid" "$@" &> /dev/null &
}

# }}}
# エイリアス{{{
# aptのエイリアス
alias apts="apt search"
alias apti="sudo apt install"
alias aptu="sudo apt update"

# pacmanのエイリアス
alias paci="sudo pacman -S"
alias pacu="sudo pacman -Syy"
alias pacs="pacman -Ss"

# brewのエイリアス
alias brewi="brew install"
alias brewu="brew update"
alias brews="brew search"
# pipのエイリアス
alias pipi="pip install"
alias pips="pip search"

# gitのエイリアス
alias gits="git status"
alias gita="git add"
alias gitc="git commit"
alias gitl="git log"
alias gitps="git push"
alias gitpl="git pull"
alias gitd="git diff"

# lsのエイリアス
# 時々遅いので将来削除するかも
alias ls="ls --color=auto"
alias ll="ls -l"
alias la="ls -a"

# cdのエイリアス
alias ..="cd .."
alias ...="cd ../.."
alias ..2="cd ../.."
alias ..3="cd ../../.."
alias ..4="cd ../../../.."
alias ..5="cd ../../../../.."
alias ..6="cd ../../../../../.."

# チートシート一覧を標準出力に返す
cheatsheets() {
    find -L ~/memo -type f -not -path '*/.git/*'
}

# チートシートをvimで開く
alias cheat='vim $(cheatsheets | fzf)'
alias c='vim $(cheatsheets | fzf)'
alias m='vim $(cheatsheets | fzf)'
alias anyenv-hash='eval "$(anyenv init -)"'

# pipenvのインストールディレクトリをプロジェクト直下にする
export PIPENV_VENV_IN_PROJECT=1

# xコマンドでアプリで開く
alias x='xdg-open'

# tmuxのIDEライクな画面分割(参考:https://egapool.hatenablog.com/entry/2019/07/26/122608)
alias ide='tmux split-window -v -p 30;
tmux split-window -h -p 66;
tmux split-window -h -p 50;'

# ghq(gitリポジトリ管理)
alias ghqg='ghq get'
alias ghql='ghq list'

# ダウンロードしたリポジトリの格納場所へ移動
# 参考:https://gist.github.com/d-kuro/f4453b93ab5e9ff60be351d7d49b1476
# alias repo='cd $(ghq list -p | fzf)'
# 参考:https://qiita.com/tomoyamachi/items/e51d2906a5bb24cf1684
# 上記のを少し修正。READMEを見ながら、選んだリポジトリの場所へ移動
alias repo='cd $(ghq list -p| fzf --preview "bat --color=always --style=header,grid --line-range :80 {}/README.*")'
# 指定したリポジトリをgithubで開く(hubコマンドが必要)
# 参考:https://qiita.com/itkrt2y/items/0671d1f48e66f21241e2
alias gh='hub browse $(ghq list | fzf | cut -d "/" -f 2,3)'
alias github=gh

# }}}
