#!/usr/bin/env bash
# vim:set foldmethod=marker foldlevel=0:
# bashrc, zshrc共通の設定。source このファイルのパスを実行して読み込む
# 注意: fasdの設定を行ったあとにz関数定義をしなければ上書きされてしまう

# 外部コマンド設定{{{
# PATHに$HOME/binを追加

[ -d "$HOME/bin" ] && export PATH=$PATH:~/bin
[ -d "$HOME/.local/bin" ] && export PATH=$PATH:~/.local/bin
[ -d "$HOME/bin/scripts" ] && export PATH=$PATH:~/bin/scripts
[ -d "$HOME/bin/scripts/cli/util" ] && export PATH=$PATH:~/bin/scripts/cli/util
[ -d "/home/linuxbrew/.linuxbrew/bin" ] && export PATH=$PATH:/home/linuxbrew/.linuxbrew/bin
[ -d "/home/linuxbrew/.linuxbrew/opt/node@12/bin" ] && export PATH=/home/linuxbrew/.linuxbrew/opt/node@12/bin:$PATH
[ -d "$HOME/.nimble/bin" ] && export PATH=~/.nimble/bin:$PATH
[ -d "$HOME/.npm-packages" ] && export PATH=$PATH:${HOME}/.npm-packages/bin

# nvimが存在すればそれをvimとして使用
if type "nvim" > /dev/null 2>&1; then
    export EDITOR=nvim
    export VISUAL=nvim
    alias vim=nvim
    alias vi=nvim
fi

# fasdが存在すれば初期化
# if type "fasd" > /dev/null 2>&1; then
#     eval "$(fasd --init auto)"
#     # fasdのエイリアスを解除
#     unalias a  # any
#     unalias s  # show / search / select
#     unalias d  # directory
#     unalias f  # file
#     unalias sd # interactive directory selection
#     unalias sf # interactive file selection
#     unalias z  # cd, same functionality as j in autojump
#     unalias zz # cd with interactive selection
# fi

# trash-cli(npmパッケージ)が存在すればrmを上書き
if type trash > /dev/null 2>&1; then
    alias rm=trash
fi

# if [ -d "/home/linuxbrew/.linuxbrew/opt/python@3/libexec/bin" ] ; then
#   export PATH="/home/linuxbrew/.linuxbrew/opt/python@3/libexec/bin:$PATH"
# fi

# xselを使ってbpcopyにエイリアス
if type "xsel" > /dev/null 2>&1; then
# 参考: https://qiita.com/Kzno/items/6f2fa98256bdffb0fd43
    alias pbcopy='xsel --clipboard --input'
fi

if type "go" > /dev/null 2>&1; then
    export GOPATH=$HOME/go
    export PATH=$PATH:$GOPATH/bin
fi

# rustupで入れたcargoの設定
[ -d "$HOME/.cargo/bin" ] && export PATH=$PATH:$HOME/.cargo/bin

# anaconda設定
[ -e "${HOME}/anaconda3/etc/profile.d/conda.sh" ] && source "$HOME/anaconda3/etc/profile.d/conda.sh"
[ -d "${HOME}/anaconda3/bin" ] && export PATH=~/anaconda3/bin:$PATH

[ -d "/usr/lib/go/bin" ] && export PATH=/usr/lib/go/bin:$PATH

# nvmの設定(遅いので一時保留)
# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# pipenvのインストールディレクトリをプロジェクト直下にする
export PIPENV_VENV_IN_PROJECT=1

# pywalの設定
# if type "wal" > /dev/null 2>&1; then
#     # Import colorscheme from 'wal' asynchronously
#     # &   # Run the process in the background.
#     # ( ) # Hide shell job control messages.
#     (cat ~/.cache/wal/sequences &)
#     # なんか起動時に文字が表示されちゃうので一旦clear
#     clear
# 
#     # Alternative (blocks terminal for 0-3ms)
#     # cat ~/.cache/wal/sequences
# 
#     # To add support for TTYs this line can be optionally added.
#     source ~/.cache/wal/colors-tty.sh
# fi
# }}}
# シェル関数{{{
# zコマンドでMRUファイルをfzfできる(fasdが必要)
# 参考: [bashでもfzf+fasdで簡単ディレクトリ移動](https://qiita.com/thesaitama/items/e139646ed6bc9c5dbf83)
alias z=
unalias z
# z() {
#   if [[ -z "$*" ]]; then
#     cd "$(fasd_cd -d | fzf -1 -0 --no-sort --tac +m | sed 's/^[0-9,.]* *//')" || exit
#   else
#     cd "$(fasd_cd -d | fzf --query="$*" -1 -0 --no-sort --tac +m | sed 's/^[0-9,.]* *//')" || exit
#   fi
# }

# rangerの多重起動を回避
# 参考: https://wiki.archlinux.org/index.php/Ranger#Preventing_nested_ranger_instances
# ranger() {
#     if [ -z "$RANGER_LEVEL" ]; then
#         /usr/bin/ranger "$@"
#     else
#         exit
#     fi
# }

# manコマンドでカラー表示
# http://momota.github.io/blog/2013/08/31/shell-man-color/
man() {
env \
        LESS_TERMCAP_mb="$(printf "\e[1;31m")" \
        LESS_TERMCAP_md="$(printf "\e[1;31m")" \
        LESS_TERMCAP_me="$(printf "\e[0m")" \
        LESS_TERMCAP_se="$(printf "\e[0m")" \
        LESS_TERMCAP_so="$(printf "\e[1;44;33m")" \
        LESS_TERMCAP_ue="$(printf "\e[0m")" \
        LESS_TERMCAP_us="$(printf "\e[1;32m")" \
        man "$@"
}

# gitリポジトリのルートからの相対パスで移動
gcd () {
[[ -n $(which git 2> /dev/null) ]] && [[ $(git status 2> /dev/null) ]] && cd "./$(git rev-parse --show-cdup)/$1" || return
}

# cdnのURI取得
cdn () {
  if [ $# -eq 1 ]; then
    curl -s "https://api.cdnjs.com/libraries/$1"|jq '.assets[0].files[]' |fzf
  else
    echo 'cdn {library-name}'
  fi
}

# zathuraをtabbedで管理
# https://github.com/mtikekar/zathura-tabbed/blob/master/zathura-tabbed

zathura-tabbed ()  {
  xidfile="/run/user/$(id -u)/zathura-tabbed.xid"
  wmclass="zathura-tabbed"
  
  # check if a tabbed window is open
  set -o pipefail
  if [ -r "$xidfile" ] && xid=$(cat "$xidfile") && xprop -id "$xid" WM_CLASS 2> /dev/null | grep -q "$wmclass";
  then
    wmctrl -i -R "$xid"
  else
    read -r xid < <(tabbed -cdn "$wmclass" -p -1 2> /dev/null)
    wmctrl -i -r "$xid" -b add,maximized_vert,maximized_horz
    echo "$xid" > "$xidfile"
  fi
  zathura -e "$xid" "$@" &> /dev/null &
}

# fzf関連(参考 https://github.com/junegunn/fzf/wiki/examples)
# fuzzy grep open via ag with line number
vg() {
  local file
  local line

  read -r file line <<<"$(ag --nobreak --noheading "$@" | fzf -0 -1 | awk -F: '{print $1, $2}')"

  if [[ -n $file ]]
  then
     vim "$file" +"$line"
  fi
}

# 同一ネットワーク内のIPアドレス一覧を確認
ipa() {
  arp -a
}

# }}}
# エイリアス{{{
# aptのエイリアス{{{
alias apts="apt search"
alias apti="sudo apt install"
alias aptu="sudo apt update"
# }}}
# pacmanのエイリアス{{{
alias paci="sudo pacman -S"
alias pacu="sudo pacman -Syy"
alias pacs="pacman -Ss"
# }}}
# yayのエイリアス{{{
alias yayi="yay -S"
alias yayu="yay -Syy"
alias yays="yay -Ss"
# }}}
# snapのエイリアス{{{
alias snapi="sudo snap install"
alias snaps="snap search"
# }}}
# brewのエイリアス{{{
alias brewi="brew install"
alias brewu="brew update"
alias brews="brew search"
# }}}
# pipのエイリアス{{{
alias pipi="pip install"
alias pips="pip search"
# }}}
# pipenvのエイリアス{{{
alias pipenvi="pipenv install"
alias pipenvr="pipenv run"
alias pipr="pipenv run"
# }}}
# yarnのエイリアス{{{
alias y='yarn'
alias ya='yarn add'
alias yi='yarn add'
alias yd='yarn add -D'
# }}}
# gitのエイリアス{{{
alias gits="git status"
alias gita="git add"
alias gitc="git commit"
alias gitl="git log"
alias gitps="git push"
alias gitpl="git pull"
alias gitd="git diff"
alias gitck='git checkout $(git branch|sed -e "s/[ *]//g"|fzf)'
# }}}
# lsのエイリアス{{{

if type "lsd" > /dev/null 2>&1; then
    alias ls="lsd --icon never"
    alias sl="lsd --icon never"
    alias ll="lsd -l --icon never"
    alias la="lsd -a --icon never"
else
    # 時々遅いので将来削除するかも
    alias ls="ls --color=auto"
    alias sl="ls --color=auto"
    alias ll="ls -l"
    alias la="ls -a"
fi
# }}}
# cdのエイリアス{{{
alias ..="cd .."
alias ...="cd ../.."
alias ..2="cd ../.."
alias ..3="cd ../../.."
alias ..4="cd ../../../.."
# }}}
# 自作スクリプトを実行{{{
myscripts() {
    find -L ~/memo/dotfiles/scripts/cli/ -type f -not -path '*/.git/*'
}
alias s='eval $(myscripts | fzf)'
# }}}
# チートシートをvimで開く{{{
# チートシート一覧を標準出力に返す
cheatsheets() {
    find -L ~/memo -type f -not -path '*/.git/*'
}
# alias cheat='vim $(cheatsheets | fzf)'
alias c='vim $(cheatsheets | fzf)'
alias m='vim $(cheatsheets | fzf)'
alias anyenv-hash='eval "$(anyenv init -)"'
# }}}
# xコマンドでアプリで開く
alias x='xdg-open'

# tmuxのIDEライクな画面分割(参考:https://egapool.hatenablog.com/entry/2019/07/26/122608)
alias ide='tmux split-window -v -p 30;
tmux split-window -h -p 66;
tmux split-window -h -p 50;'

# ghq(gitリポジトリ管理)
alias ghqg='ghq get'
alias ghql='ghq list'

# ダウンロードしたリポジトリの格納場所へ移動
# 参考:https://gist.github.com/d-kuro/f4453b93ab5e9ff60be351d7d49b1476
# alias repo='cd $(ghq list -p | fzf)'
# 参考:https://qiita.com/tomoyamachi/items/e51d2906a5bb24cf1684
# 上記のを少し修正。READMEを見ながら、選んだリポジトリの場所へ移動
alias repo='cd $(ghq list -p| fzf --preview "bat --color=always --style=header,grid --line-range :80 {}/README.*")'
alias r=repo
# 指定したリポジトリをgithubで開く(hubコマンドが必要)
# 参考:https://qiita.com/itkrt2y/items/0671d1f48e66f21241e2
alias gh='hub browse $(ghq list | fzf | cut -d "/" -f 2,3)'
alias github=gh

# 動画のダウンロード
alias you='youtube-dl $(xsel)'

# zshの起動時間を計測
alias ztime='for i in $(seq 1 10); do time zsh -i -c exit; done'

# aria2で複数コネクションを使ったダウンロード
alias wget-fast='aria2c -x5'

if type "ccat" > /dev/null 2>&1; then
    alias cat=ccat
fi

# クリップボードの内容をQRコードで表示
alias qr='xsel -ob | qrencode -t ansiutf8'

# dockerコマンド
alias docker-kill-all='docker rm $(docker ps -q -a)'

# dockerイメージたち
alias docui='docker run --rm -itv /var/run/docker.sock:/var/run/docker.sock skanehira/docui'

alias slack-term='docker run -it --rm -v $HOME/.config/slack-term/config:/config erroneousboat/slack-term'

alias dotfiles='docker run -it --rm -e "TERM=xterm-256color" -v $(pwd):/home/user/workspace  -w /home/user/workspace hrhr49/dotfiles'
# }}}
# 環境変数{{{
export BETTER_EXCEPTIONS=1

# WSLでVcXsrv(無償のXサーバー)を動かすための設定
if [ -f '/mnt/c/Windows/System32/cmd.exe' ]; then
  unset LIBGL_ALWAYS_INDIRECT
  DISPLAY=$(grep nameserver /etc/resolv.conf | awk '{print $2}'):0.0
  export DISPLAY
fi

# https://qiita.com/momomo_rimoto/items/51d533ae9529872696ce#2-wsl2%E3%81%A7gui%E3%82%92%E4%BD%BF%E3%81%86
# 独自
# いろいろなファイルを放り込んでおくディレクトリ
# MYFILES=$HOME/.config/myfiles/
# 自作の実行ファイルを置くディレクトリ
# MYBIN=$HOME/bin/
# dotfilesをおいておくディレクトリ
# MYDOTFILES=$HOME/dotfiles/
# }}}
